import codecademylib
#1.We're going to use pandas and matplotlib for this project. Import both libraries, under their normal names (pd and plt).
import matplotlib as plt
import pandas as pd
#Start by loading restaurants.csv into a DataFrame called restaurants.
restaurants = pd.read_csv('restaurants.csv')
#Inspect restaurants using .head()
print restaurants.head()
#How many different types of cuisine does FoodWheel offer? Save this number to the variable cuisine_options_count.
cuisine_options_count = restaurants.cuisine.nunique()
#Let's count the number of restaurants of each cuisine. Use groupby and count. Save your results to cuisine_counts.
cuisine_counts = restaurants.groupby('cuisine').name.count().reset_index()
print(cuisine_counts)

import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

restaurants = pd.read_csv('restaurants.csv')

#Start by creating two variables:
#cuisines contains the values of the column cuisine from cuisine_counts.
#counts contains the number of restaurants of each cuisine from cuisine_counts.
cuisine_counts = restaurants.groupby('cuisine')\
                            .name.count()\
                            .reset_index()

cuisines = cuisine_counts.cuisine.values
counts = cuisine_counts.name.values

#Let's use this the values from counts to create a pie chart. Make sure that your pie chart includes:

#Labels for each cuisine (i.e, "American", "Chinese", etc.) from cuisines
#Percent labels using autopct
#A title
#Use plt.axis to make the pie chart a perfect circle
#plt.show() to display your chart
plt.pie(counts,
        labels=cuisines,
       autopct='%d%%')
plt.title('FoodWheel')
plt.axis('equal')
plt.show()


import codecademylib
from matplotlib import pyplot as plt
import pandas as pd
#Start by loading the data from orders.csv into the DataFrame orders.
orders = pd.read_csv('orders.csv')
#Examine the first few rows of orders using .head().
print orders.head()
#Create a new column in orders called month that contains the month that the order was placed.
orders['month'] = orders.date.apply(lambda x: x .split('-')[0])
#Group orders by month and get the average order price in each month. Save your answer to avg_order.
avg_order = orders.groupby('month').price.mean().reset_index()
#We're eventually going to make a bar chart with this information. It would be nice if our bar chart had error bars. Calculate the standard deviation for the average price of orders for each month using std. Save this to std_order.
std_order = orders.groupby('month').price.std().reset_index()


import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

orders = pd.read_csv('orders.csv')

orders['month'] = orders.date.apply(lambda x: x.split('-')[0])

avg_order = orders.groupby('month').price.mean().reset_index()

std_order = orders.groupby('month').price.std().reset_index()
#Start by creating a set of axes using plt.subplot and saving them to the variable ax.
ax = plt.subplot()
#Create a variable with the average prices in it by selecting the column price from avg_order. Save this to bar_heights
bar_heights = avg_order.price
#Create a variable with the standard deviation of prices in it by selecting the column price from std_order. Save this to bar_errors.
bar_errors = std_order.price

Create a bar chart to share this data.

#Create an axes object called ax using plt.subplot.
#The height of each bar should come from bar_heights
#Use the standard deviations in bar_errors as the yerr
#The error capsize should be 5
#Make sure that you label each bar with the name of the month (i.e., 4 = April).
#Also be sure to label the y-axis
#Give your plot a descriptive title
ax = plt.subplot()
plt.bar(range(len(bar_heights)), bar_heights, yerr=bar_errors, capsize=5)
plt.ylabel("Average Order Amount")
ax.set_xticks(range(len(avg_order)))
ax.set_xticklabels(['April', 'May', 'June', 'July','August', 'September'])
plt.title('Order Amount over Time')
plt.show()

import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

orders = pd.read_csv('orders.csv')

#Start by grouping orders by customer_id and calculating the sum of price spent by each customer. Save your results to customer_amount.
customer_amount = orders.groupby('customer_id').price.sum().reset_index()
#Inspect customer_amount using print and .head().
print customer_amount.head()


#Create a histogram of this data.
#The range should be from 0 to 200
#The number of bins should be 40
#Label the x-axis Total Spent
#Label the y-axis Number of Customers
#Add a title

plt.hist(customer_amount.price.values, range=(0,200), bins=40)
plt.xlabel("Total Spent")
plt.ylabel("Number of Customers")
plt.title("Total Spent by Number of Customers")
plt.show()
